# -*- coding: utf-8 -*-
"""OStomato.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iDskEIy-WkzRiTUvpEgfPh31Y3zJG_Nn
"""



from tensorflow import keras
from tensorflow.keras.applications.inception_v3 import InceptionV3
from tensorflow.keras.layers import Flatten,Dense
from tensorflow.keras.models import Model
from tensorflow.keras.preprocessing.image import ImageDataGenerator,img_to_array,array_to_img,load_img
import pandas as pd
import cv2 as cv
import numpy as np
from tensorflow.keras.utils import to_categorical
import os
import random
import matplotlib.pyplot as plt

TRAIN_DATASET="train"
VALIDATION_DATASET="val"

CATEGORIES=["Potato___Early_blight","Potato___healthy","Potato___Late_blight"]
        
train_data=[]

for category in CATEGORIES:
        label=CATEGORIES.index(category)
        path=os.path.join(TRAIN_DATASET,category)
        for img_file in os.listdir(path):
            img=cv.imread(os.path.join(path,img_file),1)
            img=cv.cvtColor(img,cv.COLOR_BGR2RGB)
            img=cv.resize(img,(64,64))            
            train_data.append([img,label])
            
test_data=[]

for category in CATEGORIES:
        label=CATEGORIES.index(category)
        path=os.path.join(VALIDATION_DATASET,category)
        for img_file in os.listdir(path):
            img=cv.imread(os.path.join(path,img_file),1)
            img=cv.cvtColor(img,cv.COLOR_BGR2RGB)
            img=cv.resize(img,(64,64))
            test_data.append([img,label])


random.shuffle(train_data)
random.shuffle(test_data)

X_train=[]
y_train=[]

for features,label in train_data:
    X_train.append(features)
    y_train.append(label)

X_test=[]
y_test=[]

for features,label in test_data:
    X_test.append(features)
    y_test.append(label)
 

X_train=np.array(X_train).reshape(-1,64,64,3)
X_train=X_train/255.0
X_train.shape

X_test=np.array(X_test).reshape(-1,64,64,3)
X_test=X_test/255.0
X_test.shape

one_hot_train=to_categorical(y_train)
one_hot_train

one_hot_test=to_categorical(y_test)
one_hot_test


 



import glob
import keras
from tensorflow.keras.models import Sequential
#from tensorflow.keras.layers import TimeDistributed, GRU, Dropout, LSTM
from tensorflow.keras.layers import Conv2D,Dense,Flatten,MaxPooling2D,Dropout
from tensorflow.keras.optimizers import Adam, SGD
from tensorflow.keras.callbacks import ModelCheckpoint
from tensorflow.keras.layers import Convolution2D, BatchNormalization, MaxPool2D, GlobalMaxPool2D, Activation

shape=(64,64,3)
model = Sequential()


model.add(Conv2D(32, (3,3), input_shape=shape))
model.add(Activation('relu'))

model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.2))


model.add(Convolution2D(64, (3,3),  padding='valid'))
model.add(Activation('relu'))

model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.2))


model.add(Convolution2D(128, (3,3),  padding='valid'))
model.add(Activation('relu'))

model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.2))


model.add(Convolution2D(256, (3,3),  padding='valid'))
model.add(Activation('relu'))

model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.4))

model.add(Flatten())



model.add(Dense(activation='relu', units=64))
model.add(Dense(activation='relu', units=128))
model.add(Dense(activation='relu', units=64))
model.add(Dense(activation='softmax', units=3))



model.compile(
    optimizer='adam',
    loss='categorical_crossentropy',
    metrics=['accuracy']
)

model.summary()


history = model.fit(X_train,one_hot_train,epochs=75,batch_size=128,validation_split=0.2)

#Plotting
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['Train', 'Validation'], loc='upper left')
plt.show()

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['Train', 'Validation'], loc='upper left')
plt.show()